Ever since Python 1.4, the slicing syntax has supported an optional third
``step'' or ``stride'' argument. For example, these are all legal Python syntax:
 L[1:10:2], L[:-1:1], L[::-1].

>>> L = range(10)
>>> L[::2]
[0, 2, 4, 6, 8]
--> this does not specify start and stop, but use a step 2

>>> L[::-1]
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

This also works for tuples, arrays, and strings:
>>> s='abcd'
>>> s[::2]
'ac'
>>> s[::-1]
'dcba'
--> this is great, because this is an string reverse.

Following notes from stackoverflow:
[http://stackoverflow.com/questions/509211/explain-pythons-slice-notation?lq=1]
-----------------------------------
[a:b:c] 

len = length of string, tuple or list

c -- default is  +1. sign of c indicates forward or backward, absolute value of
    c indicates steps. Default is forward with step size 1. Positive means
    forward, negative means backward.

a --  when c is positive or blank, default is 0. when c is `negative`, default
    is -1.

b --  when c is positive or blank, default is len. when c is `negative`, default
    is -(len+1).

[ When c is negative, the default value of a,b is different!!! ]
According above notes, lets explain:
    >>> s='abcd'
    >>> s[::-1]
s[::-1] --the step is negative--> so start uses default value -1, end use the
    default value -(len+1)=-5 --> so the expression becomes s[-1:-5:-1]

OK. That's all !!!!
